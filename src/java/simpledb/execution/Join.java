package simpledb.execution;

import simpledb.transaction.TransactionAbortedException;
import simpledb.common.DbException;
import simpledb.execution.Predicate.Op;
import simpledb.storage.Tuple;
import simpledb.storage.TupleDesc;

import java.util.*;

/**
 * The Join operator implements the relational join operation.
 */
public class Join extends Operator {

    private static final long serialVersionUID = 1L;
    private JoinPredicate _predicate;
    private OpIterator _child1;
    private OpIterator _child2;

    /**
     * Constructor. Accepts two children to join and the predicate to join them
     * on
     * 
     * @param p
     *            The predicate to use to join the children
     * @param child1
     *            Iterator for the left(outer) relation to join
     * @param child2
     *            Iterator for the right(inner) relation to join
     */
    public Join(JoinPredicate p, OpIterator child1, OpIterator child2) {
        // code done
        _predicate = p;
        _child1 = child1;
        _child2 = child2;
    }

    public JoinPredicate getJoinPredicate() {
        // code done
        return _predicate;
    }

    /**
     * @return
     *       the field name of join field1. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField1Name() {
        // code done
        return _child1.getTupleDesc().getFieldName(_predicate.getField1());
    }

    /**
     * @return
     *       the field name of join field2. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField2Name() {
        // code done
        return _child2.getTupleDesc().getFieldName(_predicate.getField2()); // 从tuple desc中得到对应的filed名称
    }

    /**
     * @see TupleDesc#merge(TupleDesc, TupleDesc) for possible
     *      implementation logic.
     */
    public TupleDesc getTupleDesc() {
        // code done
        return TupleDesc.merge(_child1.getTupleDesc(), _child2.getTupleDesc());
    }

    public void open() throws DbException, NoSuchElementException,
            TransactionAbortedException {
        // code done
        _child1.open();
        _child2.open();
        super.open();
    }

    public void close() {
        // code done
        _child1.close();
        _child2.close();
        super.close();
    }

    public void rewind() throws DbException, TransactionAbortedException {
        // code done
        _child1.rewind();
        _child2.rewind();
    }

    /**
     * Returns the next tuple generated by the join, or null if there are no
     * more tuples. Logically, this is the next tuple in r1 cross r2 that
     * satisfies the join predicate. There are many possible implementations;
     * the simplest is a nested loops join.
     * <p>
     * Note that the tuples returned from this particular implementation of Join
     * are simply the concatenation of joining tuples from the left and right
     * relation. Therefore, if an equality predicate is used there will be two
     * copies of the join attribute in the results. (Removing such duplicate
     * columns can be done with an additional projection operator if needed.)
     * <p>
     * For example, if one tuple is {1,2,3} and the other tuple is {1,5,6},
     * joined on equality of the first column, then this returns {1,2,3,1,5,6}.
     * 
     * @return The next matching tuple.
     * @see JoinPredicate#filter
     */
    protected Tuple fetchNext() throws TransactionAbortedException, DbException {
        // code done
        TupleDesc _tupleDesc = getTupleDesc(); // 将两个tuple的desc合并，因为返回的是Join后的tuple
        // nested loop join
        while (_child1.hasNext()) {
            Tuple tuple1 = _child1.next(); // 由于fetch next是不断向下迭代，所以在返回前不需要rewind _child1
            while (_child2.hasNext()) {
                Tuple tuple2 = _child2.next();
                if (_predicate.filter(tuple1, tuple2)) {
                    Tuple tuple = new Tuple(_tupleDesc);
                    int i = 0;
                    for (; i < tuple1.getTupleDesc().numFields(); i++) {
                        tuple.setField(i, tuple1.getField(i));
                }
                    for (int j = 0; j < tuple2.getTupleDesc().numFields(); j++) {
                        tuple.setField(i + j, tuple2.getField(j));
                    }
                    return tuple;
                }
            }
            _child2.rewind();
        }
        
        return null;
    }

    @Override
    public OpIterator[] getChildren() {
        // code done
        return new OpIterator[] {_child1, _child2};
    }

    @Override
    public void setChildren(OpIterator[] children) {
        // code done
        assert children.length == 2;
        _child1 = children[0];
        _child2 = children[1];
    }

}
